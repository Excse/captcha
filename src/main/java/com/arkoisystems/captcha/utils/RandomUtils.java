package com.arkoisystems.captcha.utils;

import lombok.experimental.UtilityClass;

import java.util.concurrent.ThreadLocalRandom;

@UtilityClass
public class RandomUtils
{
    
    /**
     * The current Thread random used to generate numbers and strings.
     */
    protected ThreadLocalRandom RANDOM = ThreadLocalRandom.current();
    
    /**
     * Generates a random alphanumeric string of n length.
     *
     * @param length
     *         the length of the generated string
     *
     * @return a random alphanumeric string of n length.
     */
    public String randomAlphanumeric(final int length) {
        return RANDOM.ints(48, 123)
                .filter(index -> (index <= 57 || index >= 65) && (index <= 90 || index >= 97))
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }
    
    /**
     * Generates a random float using a lower and upper bound.
     *
     * @param lowerBound
     *         the lower bound of the random generator.
     * @param upperBound
     *         the upper bound of the random generator.
     *
     * @return a random float between the lower and upper bound.
     */
    public float nextFloat(final float lowerBound, final float upperBound) {
        return (float) RANDOM.nextDouble(lowerBound, upperBound);
    }
    
    /**
     * Generates a random int using only a upperbound.
     *
     * @param upperBound
     *         the upper bound of the random generator.
     *
     * @return a random int between 0 and the upper bound.
     */
    public float nextInt(final int upperBound) {
        return nextInt(0, upperBound);
    }
    
    /**
     * Generates a random int using a lower and upper bound.
     *
     * @param lowerBound
     *         the lower bound of the random generator.
     * @param upperBound
     *         the upper bound of the random generator.
     *
     * @return a random int between the lower and upper bound.
     */
    public float nextInt(final int lowerBound, final int upperBound) {
        return (float) RANDOM.nextInt(lowerBound, upperBound);
    }
    
    /**
     * Generates a gaussian value generated by the {@link #RANDOM}.
     *
     * @return a gaussian value generated by the {@link #RANDOM}.
     */
    public double nextGaussian() {
        return RANDOM.nextGaussian();
    }
    
}
